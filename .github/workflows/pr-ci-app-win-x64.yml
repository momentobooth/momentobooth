name: PR CI App - Windows x64

on:
  pull_request:
    branches: [ main ]
    paths-ignore: [ documentation/**, .github/workflows/pr-ci-documentation.yml, .github/workflows/deploy-documentation.yml, README.md ]
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    if: ${{ startsWith(github.event.pull_request.head.ref, 'release/') != true && github.event.pull_request.draft != true }}

    runs-on: windows-latest
    timeout-minutes: 45
    
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        submodules: 'true'

    # Inspired by: https://github.com/astral-sh/uv/blob/main/.github/workflows/ci.yml
    - name: Create Dev Drive
      run: |
        $Volume = New-VHD -Path D:/mb_dev_drive.vhdx -SizeBytes 20GB |
                  Mount-VHD -Passthru |
                  Initialize-Disk -Passthru |
                  New-Partition -AssignDriveLetter -UseMaximumSize |
                  Format-Volume -FileSystem NTFS -Confirm:$false -Force
        Write-Output $Volume
        Write-Output "DEV_DRIVE=$($Volume.DriveLetter):" >> $env:GITHUB_ENV
        Write-Output "CARGO_HOME=$($Volume.DriveLetter):\.cargo" >> $env:GITHUB_ENV
        Write-Output "RUSTUP_HOME=$($Volume.DriveLetter):\.rustup" >> $env:GITHUB_ENV
        Write-Output "SCCACHE_DIR=$($Volume.DriveLetter):\.sccache-cache" >> $env:GITHUB_ENV

    - name: Copy Git Repo to Dev Drive
      run: |
        Copy-Item -Path "${{ github.workspace }}" -Destination "${{ env.DEV_DRIVE }}/momentobooth" -Recurse

    - name: Detect Flutter Version
      uses: kuhnroyal/flutter-fvm-config-action@v3

    - name: Setup Flutter
      uses: flutter-actions/setup-flutter@v4
      with:
        channel: stable
        version: ${{ env.FLUTTER_VERSION }}
        cache: true
        cache-sdk: true

    - name: Disable Flutter analytics and CLI animations
      run: flutter config --no-analytics --no-cli-animations

    - name: Flutter SDK precache
      run: flutter precache --windows

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: clang64
        path-type: inherit
        pacboy: pkgconf:c gexiv2:c curl-winssl:c nghttp2:c nghttp3:c libusb:c gcc:c
        install: git patch
        location: '${{ env.DEV_DRIVE }}/msys2'

    - name: Clone MINGW-packages and libgphoto2
      shell: msys2 {0}
      run: |
        cd ${{ env.DEV_DRIVE }}
        git clone --depth=1 https://github.com/momentobooth/MINGW-packages
        cd MINGW-packages/mingw-w64-libgphoto2

        git clone --depth=1 https://github.com/gphoto/libgphoto2
        LIBGPHOTO2_GIT_REV=$(git rev-parse HEAD)
        echo "LIBGPHOTO2_GIT_REV=$LIBGPHOTO2_GIT_REV" >> $GITHUB_ENV

    - name: Cache libgphoto2 package
      id: cache-libgphoto2-package
      uses: actions/cache@v4
      with:
        path: ${{ env.DEV_DRIVE }}/MINGW-packages/mingw-w64-libgphoto2/mingw-w64-clang-x86_64-libgphoto2-*-any.pkg.tar.zst
        key: libgphoto2_${{ env.LIBGPHOTO2_GIT_REV }}

    - name: Build libgphoto2 from git
      working-directory: ${{ env.DEV_DRIVE }}/MINGW-packages/mingw-w64-libgphoto2
      shell: msys2 {0}
      if: steps.cache-libgphoto2-package.outputs.cache-hit != 'true'
      run: makepkg -s --noconfirm

    - name: Install libgphoto2 package
      working-directory: ${{ env.DEV_DRIVE }}/MINGW-packages/mingw-w64-libgphoto2
      shell: msys2 {0}
      run: pacman -U --noconfirm mingw-w64-clang-x86_64-libgphoto2-*-any.pkg.tar.zst

    - name: Workaround MSVC compiler looking for .lib files
      shell: pwsh
      run: |
        cd $(msys2 -c 'cygpath -w /clang64/lib')
        cp libgexiv2.dll.a gexiv2.lib
        cp libexiv2.dll.a exiv2.lib
        cp libgio-2.0.dll.a gio-2.0.lib
        cp libglib-2.0.dll.a glib-2.0.lib
        cp libgobject-2.0.dll.a gobject-2.0.lib
        cp libgphoto2.dll.a gphoto2.lib
        cp libgphoto2_port.dll.a gphoto2_port.lib
        cp libintl.dll.a intl.lib

    - name: Fix environment for build and bundle
      run: |
        Add-Content $env:GITHUB_PATH (msys2 -c 'cygpath -w /clang64/bin')
        echo "MINGW_BUNDLEDLLS_SEARCH_PATH=$(msys2 -c 'cygpath -w /clang64/bin')" >> $env:GITHUB_ENV
        echo "CLANG64_LIB_PATH=$(msys2 -c 'cygpath -w /clang64/lib')" >> $env:GITHUB_ENV

    - name: Install minimal Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        target: x86_64-pc-windows-msvc

    - name: Setup Rust compiled code cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: |
          ${{ env.DEV_DRIVE }}/momentobooth/rust -> ../build/windows/x64/plugins/rust_lib_momento_booth/cargokit_build
          ${{ env.DEV_DRIVE }}/momentobooth/rust -> target

    - name: Setup sccache
      uses: mozilla-actions/sccache-action@v0.0.8

    - name: Install cargo-expand
      uses: baptiste0928/cargo-install@v3
      with:
        crate: cargo-expand

    - name: Install flutter_rust_bridge_codegen
      uses: baptiste0928/cargo-install@v3
      with:
        crate: flutter_rust_bridge_codegen
        version: "2.9.0"

    - name: Install dependencies
      working-directory: ${{ env.DEV_DRIVE }}/momentobooth
      run: flutter pub get --enforce-lockfile

    - name: Generate localizations
      working-directory: ${{ env.DEV_DRIVE }}/momentobooth
      run: flutter gen-l10n

    - name: Generate Dart/Rust bridging code
      working-directory: ${{ env.DEV_DRIVE }}/momentobooth
      run: flutter_rust_bridge_codegen generate

    - name: Flutter analyze
      working-directory: ${{ env.DEV_DRIVE }}/momentobooth
      run: flutter analyze

    - name: Build project
      working-directory: ${{ env.DEV_DRIVE }}/momentobooth
      run: flutter build windows -v --release --dart-define SENTRY_DSN=${{ secrets.SENTRY_DSN }} --dart-define SENTRY_ENVIRONMENT=Production --dart-define SENTRY_RELEASE=${{ github.sha }} --dart-define IOLIBS=libgphoto2_iolibs --dart-define CAMLIBS=libgphoto2_camlibs --dart-define FLUTTER_VERSION=${{ env.FLUTTER_VERSION }} --dart-define LIBGPHOTO2_GIT_REV=${{ env.LIBGPHOTO2_GIT_REV }}

    - name: Workaround bundle script not working
      shell: msys2 {0}
      env:
        MSYS2_PATH_TYPE: minimal
      run: |
        pacboy -Rc llvm --noconfirm

    - name: Bundle dependencies
      working-directory: ${{ env.DEV_DRIVE }}/momentobooth
      shell: pwsh
      run: |
        $bundle_script = curl https://raw.githubusercontent.com/momentobooth/mingw-bundledlls/master/mingw-bundledlls
        echo $bundle_script | python - --copy build\windows\x64\runner\Release\rust_lib_momento_booth.dll

        # Bundle iolibs and camlibs
        mkdir build\windows\x64\runner\Release\libgphoto2_iolibs
        cp $Env:CLANG64_LIB_PATH\libgphoto2_port\*\*.dll build\windows\x64\runner\Release\libgphoto2_iolibs
        mkdir build\windows\x64\runner\Release\libgphoto2_camlibs
        cp $Env:CLANG64_LIB_PATH\libgphoto2\*\*.dll build\windows\x64\runner\Release\libgphoto2_camlibs

        # Bundle dependency libs
        cd build\windows\x64\runner\Release\
        $lib_folders = @('libgphoto2_iolibs', 'libgphoto2_camlibs')
        foreach ( $folder in $lib_folders )
        {
          $libs = ls $folder
          foreach ( $lib in $libs )
          {
            echo $bundle_script | python - --copy $lib.fullName
          }

          # Now move all libraries to the same folder as the executable (except iolibs and camlibs themselves)
          $files = ls $folder
          foreach ( $file in $files )
          {
            if ($libs.Name -notcontains $file.Name) {
              Move-Item -Path $file -Destination $file.Directory.Parent.FullName -force
            }
          }
        }

    - name: Compile Inno Setup installer
      shell: pwsh
      run: |
        &"${Env:ProgramFiles(x86)}/Inno Setup 6/iscc.exe" "${{ env.DEV_DRIVE }}/momentobooth/windows/installer/installer.iss"

    - name: Upload libgphoto2 package artifact
      uses: actions/upload-artifact@v4
      with:
        name: MSYS2 libgphoto2 package
        path: ${{ env.DEV_DRIVE }}/MINGW-packages/mingw-w64-libgphoto2/mingw-w64-clang-x86_64-libgphoto2-*-any.pkg.tar.zst
        compression-level: 0

    - name: Upload zip artifact
      uses: actions/upload-artifact@v4
      with:
        name: Windows x64 (zip)
        path: ${{ env.DEV_DRIVE }}/momentobooth/build/windows/x64/runner/Release/*
        compression-level: 9

    - name: Upload installer artifact
      uses: actions/upload-artifact@v4
      with:
        name: Windows x64 (installer)
        path: ${{ env.DEV_DRIVE }}/momentobooth/windows/installer/installer.exe
        compression-level: 0
