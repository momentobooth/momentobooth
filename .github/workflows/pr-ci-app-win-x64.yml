name: PR CI App - Windows x64

on:
  pull_request:
    branches: [ main ]
    paths-ignore: [ documentation/**, .github/workflows/pr-ci-documentation.yml, .github/workflows/deploy-documentation.yml, README.md ]
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    if: ${{ startsWith(github.event.pull_request.head.ref, 'release/') != true && github.event.pull_request.draft != true }}

    runs-on: windows-latest
    timeout-minutes: 45
    
    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"

    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        submodules: 'true'

    - name: Setup D drive for builds and caches
      run: |
        Write-Output "DEV_DRIVE=D:" >> $env:GITHUB_ENV
        Write-Output "CARGO_HOME=D:\.cargo" >> $env:GITHUB_ENV
        Write-Output "RUSTUP_HOME=D:\.rustup" >> $env:GITHUB_ENV
        Write-Output "SCCACHE_DIR=D:\.sccache-cache" >> $env:GITHUB_ENV

    - name: Configure Cargo linker for MSVC
      shell: pwsh
      run: |
        $cargoHome = $env:CARGO_HOME
        if (-not $cargoHome) {
          $cargoHome = "$env:USERPROFILE\.cargo"
        }
        $configFile = Join-Path $cargoHome "config.toml"
        if (-not (Test-Path $cargoHome)) {
          New-Item -ItemType Directory -Path $cargoHome | Out-Null
        }
        # Append of create config.toml
        Add-Content -Path $configFile -Value '[target.x86_64-pc-windows-msvc]'
        Add-Content -Path $configFile -Value 'linker = "lld-link.exe"'

    - name: Copy Git Repo to Dev Drive
      run: |
        Copy-Item -Path "${{ github.workspace }}" -Destination "${{ env.DEV_DRIVE }}/momentobooth" -Recurse

    - name: Detect Flutter Version
      uses: kuhnroyal/flutter-fvm-config-action@v3

    - name: Setup Flutter
      uses: flutter-actions/setup-flutter@v4
      with:
        channel: stable
        version: ${{ env.FLUTTER_VERSION }}
        cache: true
        cache-sdk: true

    - name: Disable Flutter analytics and CLI animations
      run: flutter config --no-analytics --no-cli-animations

    - name: Flutter SDK precache
      run: flutter precache --windows

    - name: Setup MSYS2
      uses: msys2/setup-msys2@v2
      with:
        msystem: clang64
        path-type: inherit
        pacboy: pkgconf:c curl-winssl:c nghttp2:c nghttp3:c libusb:c gcc:c libgphoto2:c
        install: git patch
        location: '${{ env.DEV_DRIVE }}/msys2'

    - name: Fix environment for build and bundle
      run: |
        Add-Content $env:GITHUB_PATH (msys2 -c 'cygpath -w /clang64/bin')
        echo "MINGW_BUNDLEDLLS_SEARCH_PATH=$(msys2 -c 'cygpath -w /clang64/bin')" >> $env:GITHUB_ENV
        echo "CLANG64_LIB_PATH=$(msys2 -c 'cygpath -w /clang64/lib')" >> $env:GITHUB_ENV

    - name: Install minimal Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        toolchain: stable
        target: x86_64-pc-windows-msvc

    - name: Setup Rust compiled code cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: |
          ${{ env.DEV_DRIVE }}/momentobooth/rust -> ../build/windows/x64/plugins/rust_lib_momento_booth/cargokit_build
          ${{ env.DEV_DRIVE }}/momentobooth/rust -> target

    - name: Setup sccache
      uses: mozilla-actions/sccache-action@v0.0.9

    - name: Setup sccache workaround
      run: Add-Content -Path $env:GITHUB_ENV -Value "SCCACHE_GHA_ENABLED=true"

    - name: Install cargo-binstall
      uses: cargo-bins/cargo-binstall@main

    - name: Install cargo-expand
      run: cargo binstall cargo-expand --force

    - name: Install flutter_rust_bridge_codegen
      run: cargo binstall flutter_rust_bridge_codegen@2.11.1 --force

    - name: Install h3xUpdtr
      run: cargo binstall h3xup --force

    - name: Install dependencies
      working-directory: ${{ env.DEV_DRIVE }}/momentobooth
      run: flutter pub get --enforce-lockfile

    - name: Generate localizations
      working-directory: ${{ env.DEV_DRIVE }}/momentobooth
      run: flutter gen-l10n

    - name: Generate Dart/Rust bridging code
      working-directory: ${{ env.DEV_DRIVE }}/momentobooth
      run: flutter_rust_bridge_codegen generate

    - name: Run build_runner
      working-directory: ${{ env.DEV_DRIVE }}/momentobooth
      run: dart run build_runner build

    - name: Flutter analyze
      working-directory: ${{ env.DEV_DRIVE }}/momentobooth
      run: flutter analyze

    - name: Build project
      working-directory: ${{ env.DEV_DRIVE }}/momentobooth
      run: flutter build windows -v --release --dart-define SENTRY_DSN=${{ secrets.SENTRY_DSN }} --dart-define SENTRY_ENVIRONMENT=Production --dart-define SENTRY_RELEASE=${{ github.sha }} --dart-define IOLIBS=libgphoto2_iolibs --dart-define CAMLIBS=libgphoto2_camlibs --dart-define LIBGPHOTO2_GIT_REV=${{ env.LIBGPHOTO2_GIT_REV }}

    - name: Bundle dependencies
      working-directory: ${{ env.DEV_DRIVE }}/momentobooth
      shell: pwsh
      run: |
        .\windows\bundle_libs.ps1

        $file = Join-Path $env:DEV_DRIVE 'momentobooth\build\windows\x64\runner\Release\libgphoto2-6.dll'
        if (-not (Test-Path $file)) {
          Write-Error "Missing file: $file"
          exit 1
        }
        Write-Output "Found: $file"

    - name: Compile Inno Setup installer
      shell: pwsh
      run: |
        choco install innosetup -y
        &"${Env:ProgramFiles(x86)}/Inno Setup 6/iscc.exe" "${{ env.DEV_DRIVE }}/momentobooth/windows/installer/installer.iss"

    - name: Upload zip artifact
      uses: actions/upload-artifact@v4
      with:
        name: Windows x64 (zip)
        path: ${{ env.DEV_DRIVE }}/momentobooth/build/windows/x64/runner/Release/*
        compression-level: 9

    - name: Get short SHA
      run: echo "SHORT_SHA=$("${{ github.sha }}".SubString(0, 8))" >> $env:GITHUB_ENV

    - name: Create h3xUpdtr version
      env:
        AWS_BUCKET_NAME: ${{ vars.AWS_BUCKET_NAME }}
        AWS_ENDPOINT: ${{ vars.AWS_ENDPOINT }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: h3xup create "${{ github.event.pull_request.head.ref }},${{ github.sha }},${{ env.SHORT_SHA }}" -i ${{ env.DEV_DRIVE }}/momentobooth/build/windows/x64/runner/Release -p Photobooth-Win-x64

    - name: Upload installer artifact
      uses: actions/upload-artifact@v4
      with:
        name: Windows x64 (installer)
        path: ${{ env.DEV_DRIVE }}/momentobooth/windows/installer/installer.exe
        compression-level: 0
