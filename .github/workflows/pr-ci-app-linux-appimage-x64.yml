name: PR CI App - Linux AppImage x86_64

on:
  pull_request:
    branches: [ main ]
    paths-ignore: [ documentation/**, .github/workflows/pr-ci-documentation.yml, .github/workflows/deploy-documentation.yml, README.md ]
    types: [opened, synchronize, reopened, ready_for_review]

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build:
    if: ${{ startsWith(github.event.pull_request.head.ref, 'release/') != true && github.event.pull_request.draft != true }}

    runs-on: ubuntu-24.04
    timeout-minutes: 30

    env:
      SCCACHE_GHA_ENABLED: "true"
      RUSTC_WRAPPER: "sccache"

    steps:
    - name: Checkout
      uses: actions/checkout@v5
      with:
        submodules: 'true'

    - name: Install apt packages
      run: sudo apt update && sudo apt install build-essential git clang cmake ninja-build pkg-config libgtk-3-dev liblzma-dev llvm libfuse2 libgphoto2-dev libdigest-sha-perl libgexiv2-dev libsecret-1-dev libcurl4-openssl-dev libusb-1.0-0-dev libmimalloc-dev libmimalloc2.0 libasound2-dev

    - name: Detect Flutter Version
      uses: kuhnroyal/flutter-fvm-config-action@v3

    - name: Setup Flutter
      uses: flutter-actions/setup-flutter@v4
      with:
        channel: stable
        version: ${{ env.FLUTTER_VERSION }}
        cache: true
        cache-sdk: true

    - name: Disable Flutter analytics and CLI animations
      run: flutter config --no-analytics --no-cli-animations

    - name: Flutter SDK precache
      run: flutter precache --linux

    - name: Install minimal Rust
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: stable

    - name: Setup Rust cache
      uses: Swatinem/rust-cache@v2
      with:
        workspaces: |
          rust -> ../build/linux/x64/release/cargo/build
          rust -> target

    - name: Setup sccache-cache
      uses: mozilla-actions/sccache-action@v0.0.9

    - name: Install cargo-binstall
      uses: cargo-bins/cargo-binstall@main

    - name: Install cargo-expand
      run: cargo binstall cargo-expand --force

    - name: Install flutter_rust_bridge_codegen
      run: cargo binstall flutter_rust_bridge_codegen@2.11.1 --force

    - name: Install lddtree
      run: cargo binstall lddtree --force

    - name: Install appimagetool
      run: wget -O appimagetool "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage" && chmod +x appimagetool && sudo mv appimagetool /usr/local/bin/

    - name: Install dependencies
      run: flutter pub get --enforce-lockfile

    - name: Generation l10n
      run: flutter gen-l10n

    - name: Generate Dart-to-Rust bridging code
      run: flutter_rust_bridge_codegen generate

    - name: Run build_runner
      run: dart run build_runner build

    - name: Flutter analyze
      run: flutter analyze

    - name: Flutter build
      run: flutter build linux -v --dart-define=SENTRY_DSN=${{ secrets.SENTRY_DSN }} --dart-define=SENTRY_ENVIRONMENT=Production --dart-define SENTRY_RELEASE=${{ github.sha }}

    - name: Create AppDir and copy Flutter bundle
      run: mkdir -p AppDir/app && cp -r build/linux/x64/release/bundle/* AppDir/app/

    - name: Bundle main executable dependency libraries
      run: mkdir AppDir/lib && pwsh linux/packaging/appimage/bundle_deps.ps1 -executablePath AppDir/app/photobooth -copyTo AppDir/lib

    - name: Bundle Rust library and Flutter plugin dependency libraries
      run: for f in AppDir/app/lib/*; do pwsh linux/packaging/appimage/bundle_deps.ps1 -executablePath "$f" -copyTo AppDir/lib; done

    - name: Copy camlibs/iolibs and bundle deps
      run: |
        mkdir AppDir/camlibs && cp /usr/lib/x86_64-linux-gnu/libgphoto2/*/* AppDir/camlibs
        mkdir AppDir/iolibs && cp /usr/lib/x86_64-linux-gnu/libgphoto2_port/*/* AppDir/iolibs
        for f in /usr/lib/x86_64-linux-gnu/libgphoto2/*/*; do pwsh linux/packaging/appimage/bundle_deps.ps1 -executablePath "$f" -copyTo AppDir/lib; done
        for f in /usr/lib/x86_64-linux-gnu/libgphoto2_port/*/*; do pwsh linux/packaging/appimage/bundle_deps.ps1 -executablePath "$f" -copyTo AppDir/lib; done

    - name: Copy GTK printbackends and bundle deps
      run: |
        mkdir AppDir/gtk && cp -r /usr/lib/x86_64-linux-gnu/gtk-3.0/3.0.0/printbackends AppDir/gtk
        for f in /usr/lib/x86_64-linux-gnu/gtk-3.0/3.0.0/printbackends/*; do pwsh linux/packaging/appimage/bundle_deps.ps1 -executablePath "$f" -copyTo AppDir/lib; done

    - name: Copy icon, .desktop and AppRun, set exec permission on AppRun
      run: |
        cp linux/packaging/appimage/momentoBooth.desktop AppDir/
        cp linux/packaging/appimage/AppRun AppDir/
        cp linux/packaging/appimage/icon.svg AppDir/
        chmod +x AppDir/AppRun

    - name: Pack as AppImage and rename
      run: appimagetool AppDir && mv MomentoBooth-x86_64.AppImage MomentoBooth-Linux-x86_64.AppImage

    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: Linux x86_64 AppImage
        path: MomentoBooth-Linux-x86_64.AppImage
